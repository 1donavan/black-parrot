variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: none

stages:
  - prereq
  - check
  - test-short
  - test-long
 
#pass:
#  script:
#    - echo "Passing job 1"
#    - exit 0

#fail:
#  script:
#    - echo "Failing job 2"
#    - exit 1 

update-tools:
  stage: prereq
  when: manual
  tags:
    - bsg
  script:
    - $CI_PROJECT_DIR/ci/cache.sh tools > make_tools.log
  artifacts:
    when: always
    paths:
      - make_tools.log

update-tests:
  stage: prereq
  when: manual
  tags:
    - bsg
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - $CI_PROJECT_DIR/ci/cache.sh progs > make_progs.log
  artifacts:
    when: always
    paths:
      - link.log
      - make_progs.log

check-design:
  stage: check
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - dc
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - $CI_PROJECT_DIR/ci/regress.sh check_design.syn bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/
      
lint-verilator:
  stage: check
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - verilator
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - $CI_PROJECT_DIR/ci/regress.sh lint.sc bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/
      
# NOTE: me regression can only work for single thread right now, so we don't use regress.sh
me-regress-verilator:
  stage: test-short
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - verilator
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - echo "Updating CCE ucode"
    - make ucode
    - echo "Cleaning working directory"
    - make -C bp_me/syn clean
    - echo "Executing regression regress.me.sc on end bp_me"
    - make -C bp_me/syn regress.me.sc
    - grep -cr "FAILED" bp_me/syn/reports/ && exit 1
    - exit 0

  artifacts:
    when: always
    paths:
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_me/syn/reports/
     
# NOTE: me regression can only work for single thread right now, so we don't use regress.sh
me-regress-vcs:
  stage: test-short
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - vcs
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - echo "Updating CCE ucode"
    - make ucode
    - echo "Cleaning working directory"
    - make -C bp_me/syn clean
    - echo "Executing regression regress.me.v on end bp_me"
    - make -C bp_me/syn regress.me.v
    - grep -cr "FAILED" bp_me/syn/reports/ && exit 1
    - exit 0

  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_me/syn/reports/
      
top-riscv-verilator:
  stage: test-short
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - verilator
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - make -C bp_top/syn clean build.sc
    - $CI_PROJECT_DIR/ci/regress.sh regress_riscv.sc bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/
 
# Disabled because it's too long running     
top-beebs-verilator:
  when: manual
  stage: test-long
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - verilator
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - make -C bp_top/syn clean build.sc
    - $CI_PROJECT_DIR/ci/regress.sh regress_beebs.sc bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/
      
lint-vcs:
  stage: check
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - vcs
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - $CI_PROJECT_DIR/ci/regress.sh lint.v bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/

top-riscv-tests-vcs:
  stage: test-short
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - vcs
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - make -C bp_top/syn clean build.v
    - $CI_PROJECT_DIR/ci/regress.sh regress_riscv.v bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/
      
top-beebs-vcs:
  stage: test-long
  only:
    - master
    - "*dev"
    - ci_testing
  tags:
    - vcs
  before_script:
    - $CI_PROJECT_DIR/ci/cache.sh link > link.log
  script:
    - make -C bp_top/syn clean build.v
    - $CI_PROJECT_DIR/ci/regress.sh regress_beebs.v bp_top > regress.log
  artifacts:
    when: always
    paths:
      - link.log
      - regress.log
      - bp_top/syn/reports/

